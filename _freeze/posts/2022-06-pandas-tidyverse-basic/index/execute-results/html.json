{
  "hash": "d875135ad3ef3289f8b33c0dbb965165",
  "result": {
    "markdown": "---\ntitle: \"pandas & tidyverse: The basics\"\ndescription: |\n  Comparing how to do the most basic of tasks in `pandas` and the `tidyverse`: creating,\n  reading, and writing tabular data.\nauthor: \"Ivan Dubrovin\"\ndate: \"2022-06-15\"\ncategories: [Python & R]\nimage: cover.png\n---\n\n\n\n\nI'm starting a series of posts that compare how to do the same things in Python and R.\nThis is the first one, comparing the most basic things: creating, printing, reading, and writing tabular data in [`pandas`](https://pandas.pydata.org/) and the [`tidyverse`](https://www.tidyverse.org/).\nThere will be nothing complex here, I am mostly trying out the format.\n\nThe code examples are based on the [Pandas course on Kaggle](https://www.kaggle.com/learn/pandas).\n\n## Attaching libraries\n\nThe easiest.\nHere is Python:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\n```\n:::\n\n\nAnd `here::here()` is R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n## Creating data\n\nNot always is data available in a nicely formatted UTF-8 encoded CSVs that we can read in.\nSometimes, there is a need to create a table by hand.\nLet's take a look at how to create small toy tables (to use as test cases, for example).\n\nIn Python, the easiest way to do that is to pass a dictionary where keys are column names and values are lists of values to the `pd.DataFrame` initializer:\n\n\n::: {.cell}\n\n```{.python .cell-code}\ntoy_table = pd.DataFrame({\n    \"Apples\": [35, 41],\n    \"Bananas\": [21, 34],\n})\ntoy_table\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Apples  Bananas\n0      35       21\n1      41       34\n```\n:::\n:::\n\n\nIn R, `tribble` function exists specifically to simplify this task of creating a small example tables:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntribble(\n    ~Apples, ~Bananas,\n    30,      21,\n    41,      34\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  Apples Bananas\n   <dbl>   <dbl>\n1     30      21\n2     41      34\n```\n:::\n:::\n\n\n## Reading the data\n\nThe function to read data from a file is called `read_csv` for both.\nIn both, it is insanely customizable by a huge amount of arguments.\nFor example, `pandas` separates the index into it's own entity that is `r/notlikeothercolumns`, and if the index is explicitly written in the file, we can make it interpret it as such by passing an integer column position or a string column name to the `index_col` argument:\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndd = pd.read_csv(\"games-first15.csv\", index_col=0)\ndd.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          rated  ...  opening_ply\nid               ...             \nTZJHLljE  False  ...            5\nl1NXvwaE   True  ...            4\nmIICvQHh   True  ...            3\nkWKvrqYL   True  ...            3\n9tXo1AUZ   True  ...            5\n\n[5 rows x 15 columns]\n```\n:::\n:::\n\n\n`tidyverse` does not care for indexes and will read everything as ordinary columns.\nIt is, however, very talkative and reports the detected column types by default.\nWe can ask it to be quiet by disabling the `show_col_types` flag:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndd <- read_csv(\"games-first15.csv\", show_col_types = FALSE)\nhead(dd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 16\n  id    rated created_at last_move_at turns victory_status winner increment_code\n  <chr> <lgl>      <dbl>        <dbl> <dbl> <chr>          <chr>  <chr>         \n1 TZJH… FALSE    1.50e12      1.50e12    13 outoftime      white  15+2          \n2 l1NX… TRUE     1.50e12      1.50e12    16 resign         black  5+10          \n3 mIIC… TRUE     1.50e12      1.50e12    61 mate           white  5+10          \n4 kWKv… TRUE     1.50e12      1.50e12    61 mate           white  20+0          \n5 9tXo… TRUE     1.50e12      1.50e12    95 mate           white  30+3          \n6 MsoD… FALSE    1.50e12      1.50e12     5 draw           draw   10+0          \n# … with 8 more variables: white_id <chr>, white_rating <dbl>, black_id <chr>,\n#   black_rating <dbl>, moves <chr>, opening_eco <chr>, opening_name <chr>,\n#   opening_ply <dbl>\n```\n:::\n:::\n\n\n## Writing the data\n\nWriting the data to files is even easier than reading them in.\nAgain, both are highly configurable.\nIn `pandas` a `DataFrame` has a method called `to_csv`.\nHere it is in use, asked nicely to not include the index into the output:\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndd.to_csv(\"out.csv\", index=False)\n```\n:::\n\n\nIn `tidyverse`, the `write_csv` function takes in the table to write and a path to write it to:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(dd, \"out.csv\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}