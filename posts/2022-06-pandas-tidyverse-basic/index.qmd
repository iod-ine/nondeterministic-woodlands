---
title: "pandas & tidyverse: The basics"
description: |
  Comparing how to do the most basic of tasks in `pandas` and the `tidyverse`: creating,
  reading, and writing tabular data.
author: "Ivan Dubrovin"
date: "2022-06-15"
categories: [Python & R]
image: cover.png
---

```{r}
#| label: setup
#| include: false
knitr::opts_knit$set(root.dir = here::here("posts", "2022-06-pandas-tidyverse-basic/"))
```

I'm starting a series of posts that compare how to do the same things in Python and R.
This is the first one, comparing the most basic things: creating, printing, reading, and writing tabular data in [`pandas`](https://pandas.pydata.org/) and the [`tidyverse`](https://www.tidyverse.org/).
There will be nothing complex here, I am mostly trying out the format.

The code examples are based on the [Pandas course on Kaggle](https://www.kaggle.com/learn/pandas).

## Attaching libraries

The easiest.
Here is Python:

```{python}
import pandas as pd
```

And `here::here()` is R:

```{r}
#| output: false
library(tidyverse)
```

## Creating data

Not always is data available in a nicely formatted UTF-8 encoded CSVs that we can read in.
Sometimes, there is a need to create a table by hand.
Let's take a look at how to create small toy tables (to use as test cases, for example).

In Python, the easiest way to do that is to pass a dictionary where keys are column names and values are lists of values to the `pd.DataFrame` initializer:

```{python}
toy_table = pd.DataFrame({
    "Apples": [35, 41],
    "Bananas": [21, 34],
})
toy_table
```

In R, `tribble` function exists specifically to simplify this task of creating a small example tables:

```{r}
tribble(
    ~Apples, ~Bananas,
    30,      21,
    41,      34
)
```

## Reading the data

The function to read data from a file is called `read_csv` for both.
In both, it is insanely customizable by a huge amount of arguments.
For example, `pandas` separates the index into it's own entity that is `r/notlikeothercolumns`, and if the index is explicitly written in the file, we can make it interpret it as such by passing an integer column position or a string column name to the `index_col` argument:

```{python}
dd = pd.read_csv("games-first15.csv", index_col=0)
dd.head()
```

`tidyverse` does not care for indexes and will read everything as ordinary columns.
It is, however, very talkative and reports the detected column types by default.
We can ask it to be quiet by disabling the `show_col_types` flag:

```{r}
#| warning: false
dd <- read_csv("games-first15.csv", show_col_types = FALSE)
head(dd)
```

## Writing the data

Writing the data to files is even easier than reading them in.
Again, both are highly configurable.
In `pandas` a `DataFrame` has a method called `to_csv`.
Here it is in use, asked nicely to not include the index into the output:

```{python}
dd.to_csv("out.csv", index=False)
```

In `tidyverse`, the `write_csv` function takes in the table to write and a path to write it to:

```{r}
write_csv(dd, "out.csv")
```
